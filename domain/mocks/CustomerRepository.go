// Code generated by mockery v2.2.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/DaveChambers/gocustomerapp/domain"
	mock "github.com/stretchr/testify/mock"
)

// CustomerRepository is an autogenerated mock type for the CustomerRepository type
type CustomerRepository struct {
	mock.Mock
}

// CloseConnection provides a mock function with given fields:
func (_m *CustomerRepository) CloseConnection() {
	_m.Called()
}

// Create provides a mock function with given fields: customer
func (_m *CustomerRepository) Create(customer *domain.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: customer
func (_m *CustomerRepository) Delete(customer *domain.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields:
func (_m *CustomerRepository) FetchAll() ([]domain.Customer, error) {
	ret := _m.Called()

	var r0 []domain.Customer
	if rf, ok := ret.Get(0).(func() []domain.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *CustomerRepository) GetByEmail(email string) (domain.Customer, error) {
	ret := _m.Called(email)

	var r0 domain.Customer
	if rf, ok := ret.Get(0).(func(string) domain.Customer); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(domain.Customer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *CustomerRepository) GetByID(id int) (domain.Customer, error) {
	ret := _m.Called(id)

	var r0 domain.Customer
	if rf, ok := ret.Get(0).(func(int) domain.Customer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Customer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: customer
func (_m *CustomerRepository) Update(customer *domain.Customer) error {
	ret := _m.Called(customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
